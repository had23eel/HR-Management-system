import 'package:employeee/Controller/Suggestions_controller.dart';
import 'package:employeee/Controller/SuggsetionsController.dart';
import 'package:employeee/Model/Suggsetions_model.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sidebarx/sidebarx.dart';

import '../Controller/RequestController.dart';
import 'SideBarWidget.dart';






class Suggestions extends StatefulWidget {
  const Suggestions({Key? key}) : super(key: key);

  @override
  State<Suggestions> createState() => _SuggestionsState();
}

class _SuggestionsState extends State<Suggestions> {
  final _controller = SidebarXController(selectedIndex: 0,extended: false);
  bool isReadmore = false;
  Autogenerated sug =new Autogenerated();
  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;

    final isSmallScreen = width < 600 ;

    return Row(
      children: [
        if (!isSmallScreen)
          Flexible(child: SideBarWidget(controller:_controller)
            ,flex: 2,
          )
        ,
        Flexible(
          flex: 6,
          child:  FutureBuilder(
              future: Suggsetionscontroller(),
              builder:(BuildContext context, AsyncSnapshot snapshot) {
    if(snapshot.hasData){
      sug = snapshot.data;
                 return ListView.builder(
                    itemCount: sug.suggestions?.length,
                    itemBuilder: (BuildContext context ,int index){
if(sug.suggestions![index].message=="complaint"){
                      return InboxItem(
                        senderName: "Compliant",
                        subject: '${sug.suggestions![index].complaint}',
                        message:
                        '${sug.suggestions![index].complaint}',
                        time: '12:30 PM',
                        unread: true,
                      );}else{
  return InboxItem(
    senderName: "Suggestion",
    subject: '${sug.suggestions![index].message}',
    message:
    '${sug.suggestions![index].complaint}',
    time: '12:30 PM',
    unread: true,
  );

}


                    }
                );}
    else if(snapshot.hasError){
      return Container(
        child: Center(child: Text("NO Data Found"),),
      );
    }else {
      return Container(
        child: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

              }
              ),
        ),
      ],
    );
  }

}
read()async{
  SharedPreferences prefs = await SharedPreferences.getInstance();
  final key = 'token';
  final value = prefs.get(key)??0;
  print('read : $value');
  return value ;
}
class InboxItem extends StatelessWidget {
  final String senderName;
  final String subject;
  final String message;
  final String time;
  final bool unread;

  InboxItem({
    required this.senderName,
    required this.subject,
    required this.message,
    required this.time,
    required this.unread,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: Color(0xFFef7d00),
        child: Text(senderName[0]),
      ),
      title: Text(senderName),
      subtitle: Text(subject),
      trailing: Text(time,style: TextStyle(color: Color(0xFFef7d00))),
      onTap: () {
        Navigator.push(context,MaterialPageRoute(builder: (BuildContext context) {
          return Details(senderName: senderName, time: time, message: message, subject: subject, unread: true,);

        }

        ));

      },
      contentPadding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      selected: unread,
      selectedTileColor: Colors.grey[200],
    );
  }
}

class Details extends StatelessWidget {
  final String senderName;
  final String subject;
  final String message;
  final String time;
  final bool unread;

  Details({
    required this.senderName,
    required this.subject,
    required this.message,
    required this.time,
    required this.unread,
  });
  @override
  Widget build(BuildContext context) {
    final _key = GlobalKey<ScaffoldState>();

    return  Scaffold(
      appBar: AppBar(
        key: _key,
        title: Text('Details'),
      ),
      body: Padding(
        padding: EdgeInsets.all(8.0),
        child: Column(
          children: [
            Text('Sender Name : '),
            Center(
              child: Text(message),
            )
          ],
        ),
      ),
    );
  }
}


